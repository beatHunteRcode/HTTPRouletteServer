/*
 * Roulette API
 *
 * This is API for casino game Roulette.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Bet of a player
    /// </summary>
    [DataContract]
    public partial class Bet : IEquatable<Bet>
    { 
        /// <summary>
        /// Gets or Sets BetType
        /// </summary>

        [DataMember(Name="BetType")]
        public int? BetType { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>

        [DataMember(Name="Number")]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets Sum
        /// </summary>

        [DataMember(Name="Sum")]
        public int? Sum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bet {\n");
            sb.Append("  BetType: ").Append(BetType).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Sum: ").Append(Sum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Bet)obj);
        }

        /// <summary>
        /// Returns true if Bet instances are equal
        /// </summary>
        /// <param name="other">Instance of Bet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bet other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BetType == other.BetType ||
                    BetType != null &&
                    BetType.Equals(other.BetType)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    Sum == other.Sum ||
                    Sum != null &&
                    Sum.Equals(other.Sum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BetType != null)
                    hashCode = hashCode * 59 + BetType.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (Sum != null)
                    hashCode = hashCode * 59 + Sum.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Bet left, Bet right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Bet left, Bet right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
