/*
 * Roulette API
 *
 * This is API for casino game Roulette.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Getting info about bets from server
        /// </summary>
        
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/announce_bets")]
        [ValidateModelState]
        [SwaggerOperation("AnnounceBetsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "OK")]
        public virtual IActionResult AnnounceBetsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
            : default(List<User>);
            //TODO: Change the data returned
            return new ObjectResult(Server.listOfUsers);
        }

        /// <summary>
        /// Disconnecting client
        /// </summary>
        
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/disconnect")]
        [ValidateModelState]
        [SwaggerOperation("DisconnectGet")]
        public virtual IActionResult DisconnectGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Getting info from a user-Croupier that bet-time ended and he wanted to draw roulette.
        /// </summary>
        
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/drawing")]
        [ValidateModelState]
        [SwaggerOperation("DrawingGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "OK")]
        public virtual IActionResult DrawingGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
            : default(List<User>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Make a bet
        /// </summary>
        
        /// <param name="betType">Type of Bet</param>
        /// <param name="sum"></param>
        /// <param name="number"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/making_bet")]
        [ValidateModelState]
        [SwaggerOperation("MakingBetPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Bet>), description: "OK")]
        public virtual IActionResult MakingBetPost([FromQuery][Required()]decimal? betType, [FromQuery][Required()]int? sum, [FromQuery]int? number)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Bet>));

            Bet bet = new Bet();
            bet.BetType = (int)betType;
            bet.Number = number;
            bet.Sum = sum;

            string exampleJson = null;
            exampleJson = "{}";
            
            //var example = exampleJson != null
            //? JsonConvert.DeserializeObject<List<Bet>>(exampleJson)
            //: default(List<Bet>);
            //TODO: Change the data returned
            return new ObjectResult(bet);
        }

        /// <summary>
        /// Register a client as PLAYER or CROUPIER
        /// </summary>
        
        /// <param name="userType">Type of a registrated user. PLAYER &#x3D; 1; CROUPIER &#x3D; 2;</param>
        /// <param name="username">Name of a registered user</param>
        /// <param name="password">Password of a registered user</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/register")]
        [ValidateModelState]
        [SwaggerOperation("RegisterPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "OK")]
        public virtual IActionResult RegisterPost([FromQuery][Required()]decimal? userType, [FromQuery][Required()][StringLength(20, MinimumLength=3)]string username, [FromQuery][Required()][StringLength(20, MinimumLength=3)]string password)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            User user = new User();
            user.UserType = (int)userType;
            user.Bet = new Bet();
            user.UserName = username;
            user.Password = password;

            Server.listOfUsers.Add(user);

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            //TODO: Change the data returned
            return new ObjectResult(user);
        }

        /// <summary>
        /// Getting info about winning number
        /// </summary>
        
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/winning_number")]
        [ValidateModelState]
        [SwaggerOperation("WinningNumberGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(int?), description: "OK")]
        public virtual IActionResult WinningNumberGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(int?));

            string exampleJson = null;
            exampleJson = "{}";
            
            //var example = exampleJson != null
            //? JsonConvert.DeserializeObject<int?>(exampleJson)
            //: default(int?);
            //TODO: Change the data returned
            return new ObjectResult(RollRoulette());
        }

        private byte RollRoulette()
        {
            Random rnd = new Random();
            return (byte)rnd.Next(0, 37);
        }
    }
}
